Vicare Scheme version 0.1d2+, 64-bit (revision 08bd828acfa9382324150b41f4e86c540c10a886, build 2013-08-27)
Copyright (c) 2006-2010 Abdulaziz Ghuloum and contributors

> (quote (I love you))
(I love you)
> (list (quote I) (quote love) (quote you))
(I love you)
> (cons 'I (cons 'love (cons 'you '())))
(I love you)
> (let ([words '(love you I)])
  (list (car (cdr (cdr words)))
        (car words)
        (car (cdr words))))
(I love you)
> (load "evalo.scm")
> (run 1 (expr) (evalo expr '(I love you)))
('(I love you))
> '(I love you)
(I love you)
> (run 2 (expr) (evalo expr '(I love you)))
('(I love you) (list 'I 'love 'you))
> (list 'I 'love 'you)
(I love you)
> (run 99 (expr) (evalo expr '(I love you)))
('(I love you) (list 'I 'love 'you)
  ((car '((I love you) . _.0)) (absent closure _.0))
  (cons 'I '(love you)) ((lambda () '(I love you)))
  ((cdr '(_.0 I love you)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love 'you) (absent closure _.0))
  ((list 'I 'love (car '(you . _.0))) (absent closure _.0))
  (((lambda (_.0) '(I love you)) '_.1) (=/= ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (car (list '(I love you)))
  ((list 'I (car '(love . _.0)) 'you) (absent closure _.0))
  (((lambda (_.0) _.0) '(I love you)) (=/= ((_.0 closure)))
    (sym _.0))
  ((list 'I 'love (cdr '(_.0 . you))) (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love 'you) (absent closure _.0))
  ((cons (car '(I . _.0)) '(love you)) (absent closure _.0))
  (list 'I 'love ((lambda () 'you)))
  (cons 'I (list 'love 'you))
  ((if '#t '(I love you) _.0) (absent closure _.0))
  ((car (list '(I love you) '_.0)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car '(you . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((if '#f _.0 '(I love you)) (absent closure _.0))
  ((lambda () (list 'I 'love 'you)))
  ((list 'I (cdr '(_.0 . love)) 'you) (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1)) 'you)
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) '(I love you)) (list)) (=/= ((_.0 quote)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car '(you . _.1)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love (car (list 'you)))
  (((lambda () (car '((I love you) . _.0))))
    (absent closure _.0))
  ((lambda () (cons 'I '(love you))))
  ((list (car '(I . _.0)) 'love (cdr '(_.1 . you)))
    (absent closure _.0) (absent closure _.1))
  (list ((lambda () 'I)) 'love 'you)
  ((lambda () ((lambda () '(I love you)))))
  ((list 'I (car '(love . _.0)) (cdr '(_.1 . you)))
    (absent closure _.0) (absent closure _.1))
  ((if #t '(I love you) _.0) (absent closure _.0))
  (((lambda (_.0 _.1) '(I love you)) '_.2 '_.3)
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((cons (cdr '(_.0 . I)) '(love you)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love ((lambda () 'you)))
    (absent closure _.0))
  (car (list '(I love you) (list)))
  ((list 'I 'love ((lambda (_.0) 'you) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love you) '_.0 '_.1)) (absent closure _.0)
    (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love (car '(you . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) ((lambda () 'you)))
    (absent closure _.0))
  ((car (car '(((I love you) . _.0) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#t 'you _.0)) (absent closure _.0))
  ((cons 'I (car '((love you) . _.0))) (absent closure _.0))
  (list 'I ((lambda () 'love)) 'you)
  (((lambda () (cdr '(_.0 I love you))))
    (absent closure _.0))
  ((list 'I 'love ((lambda () (car '(you . _.0)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1)) 'you)
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'you '_.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love)) 'you)
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#f _.0 'you)) (absent closure _.0))
  ((car (cons '(I love you) '_.0)) (absent closure _.0))
  (cons 'I (cons 'love '(you)))
  ((list 'I (cdr '(_.0 . love)) (car '(you . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car '(you . _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) (list 'love 'you))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car (list 'you)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'you)))
    (absent closure _.0))
  (((lambda (_.0 _.1) _.1) '_.2 '(I love you))
    (=/= ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  ((list 'I 'love ((lambda (_.0) _.0) 'you))
    (=/= ((_.0 closure))) (sym _.0))
  (((lambda () (list (car '(I . _.0)) 'love 'you)))
    (absent closure _.0))
  (((lambda (_.0) (list 'I 'love 'you)) '_.1)
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car ((lambda () '((I love you) . _.0))))
    (absent closure _.0))
  (cons 'I ((lambda () '(love you))))
  ((list (cdr '(_.0 . I)) 'love (cdr '(_.1 . you)))
    (absent closure _.0) (absent closure _.1))
  (list (car (list 'I)) 'love 'you)
  (car (list '(I love you) #t))
  ((list 'I 'love ((lambda () (cdr '(_.0 . you)))))
    (absent closure _.0))
  ((if #f _.0 '(I love you)) (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (cdr '(_.1 . you)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (cdr '(_.2 . you)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons 'I (list 'love (car '(you . _.0))))
    (absent closure _.0))
  (((lambda () (list 'I 'love (car '(you . _.0)))))
    (absent closure _.0))
  (((lambda () ((lambda (_.0) '(I love you)) '_.1)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I 'love (if #t 'you _.0)) (absent closure _.0))
  (((lambda (_.0) (car '((I love you) . _.1))) '_.2)
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (cons ((lambda () 'I)) '(love you))
  ((cons 'I (list (car '(love . _.0)) 'you))
    (absent closure _.0))
  ((lambda () (car (list '(I love you)))))
  ((car (list '(I love you) '_.0 (list)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love ((lambda () 'you)))
    (absent closure _.0))
  (((lambda () (list 'I (car '(love . _.0)) 'you)))
    (absent closure _.0))
  ((car (list '(I love you) (list) '_.0))
    (absent closure _.0))
  ((car (list '(I love you) '_.0 '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list 'I 'love ((lambda () ((lambda () 'you)))))
  ((car (cdr '(_.0 (I love you) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love ((lambda (_.1) 'you) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda (_.0 _.1) _.0) '(I love you) '_.2)
    (=/= ((_.0 closure)) ((_.1 _.0))) (absent closure _.1)
    (absent closure _.2) (sym _.0))
  ((cons 'I (cdr '(_.0 love you))) (absent closure _.0))
  ((list ((lambda () 'I)) 'love (car '(you . _.0)))
    (absent closure _.0))
  (car (cons '(I love you) (list)))
  (((lambda (_.0) (cons 'I '(love you))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (car '(love . _.0)) ((lambda (_.1) 'you) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (list 'I 'love (car (list 'you (list))))
  ((cdr (car '((_.0 I love you) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love)) ((lambda () 'you)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () 'you)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'you '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1)))
> (car (cons '(I love you) (list)))
(I love you)
> ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () 'you)))
    (absent closure _.0) (absent closure _.1))
Unhandled exception
 Condition components:
   1. &undefined
   2. &who: eval
   3. &message: "unbound variable"
   4. &irritants: (closure)
> (list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () 'you)))
(I love you)
> (list (car '(I . 5)) (car '(love . _.1))
     ((lambda () 'you)))
(I love you)
> (list (car '(I . (a b c))) (car '(love . _.1))
     ((lambda () 'you)))
(I love you)
> (list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () 'you)))
(I love you)
> (time (length (run 99 (expr) (evalo expr '(I love you)))))
running stats for (length (run 99 (expr) (evalo expr '(I love you)))):
    no collections
    8 ms elapsed cpu time, including 0 ms collecting
    8 ms elapsed real time, including 0 ms collecting
    5246928 bytes allocated
99
> (time (length (run 999 (expr) (evalo expr '(I love you)))))
running stats for (length (run 999 (expr) (evalo expr '(I love you)))):
    7 collections
    174 ms elapsed cpu time, including 56 ms collecting
    177 ms elapsed real time, including 59 ms collecting
    57231760 bytes allocated
999
> (time (length (run 9999 (expr) (evalo expr '(I love you)))))
running stats for (length (run 9999 (expr) (evalo expr '(I love you)))):
    77 collections
    2404 ms elapsed cpu time, including 899 ms collecting
    2432 ms elapsed real time, including 928 ms collecting
    641788720 bytes allocated
9999
> (run 999 (expr) (evalo expr '(I love lamp)))
('(I love lamp) (list 'I 'love 'lamp)
  ((car '((I love lamp) . _.0)) (absent closure _.0))
  (cons 'I '(love lamp)) ((lambda () '(I love lamp)))
  ((cdr '(_.0 I love lamp)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love 'lamp) (absent closure _.0))
  ((list 'I 'love (car '(lamp . _.0))) (absent closure _.0))
  (((lambda (_.0) '(I love lamp)) '_.1) (=/= ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (car (list '(I love lamp)))
  ((list 'I (car '(love . _.0)) 'lamp) (absent closure _.0))
  (((lambda (_.0) _.0) '(I love lamp)) (=/= ((_.0 closure)))
    (sym _.0))
  ((list 'I 'love (cdr '(_.0 . lamp))) (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love 'lamp) (absent closure _.0))
  ((cons (car '(I . _.0)) '(love lamp)) (absent closure _.0))
  (list 'I 'love ((lambda () 'lamp)))
  (cons 'I (list 'love 'lamp))
  ((if '#t '(I love lamp) _.0) (absent closure _.0))
  ((car (list '(I love lamp) '_.0)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((if '#f _.0 '(I love lamp)) (absent closure _.0))
  ((lambda () (list 'I 'love 'lamp)))
  ((list 'I (cdr '(_.0 . love)) 'lamp) (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1)) 'lamp)
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) '(I love lamp)) (list))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love (car (list 'lamp)))
  (((lambda () (car '((I love lamp) . _.0))))
    (absent closure _.0))
  ((lambda () (cons 'I '(love lamp))))
  ((list (car '(I . _.0)) 'love (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  (list ((lambda () 'I)) 'love 'lamp)
  ((lambda () ((lambda () '(I love lamp)))))
  ((list 'I (car '(love . _.0)) (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((if #t '(I love lamp) _.0) (absent closure _.0))
  (((lambda (_.0 _.1) '(I love lamp)) '_.2 '_.3)
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((cons (cdr '(_.0 . I)) '(love lamp)) (absent closure _.0))
  ((list (car '(I . _.0)) 'love ((lambda () 'lamp)))
    (absent closure _.0))
  (car (list '(I love lamp) (list)))
  ((list 'I 'love ((lambda (_.0) 'lamp) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) ((lambda () 'lamp)))
    (absent closure _.0))
  ((car (car '(((I love lamp) . _.0) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#t 'lamp _.0)) (absent closure _.0))
  ((cons 'I (car '((love lamp) . _.0))) (absent closure _.0))
  (list 'I ((lambda () 'love)) 'lamp)
  (((lambda () (cdr '(_.0 I love lamp))))
    (absent closure _.0))
  ((list 'I 'love ((lambda () (car '(lamp . _.0)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1)) 'lamp)
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp '_.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love)) 'lamp)
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#f _.0 'lamp)) (absent closure _.0))
  ((car (cons '(I love lamp) '_.0)) (absent closure _.0))
  (cons 'I (cons 'love '(lamp)))
  ((list 'I (cdr '(_.0 . love)) (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car '(lamp . _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) (list 'love 'lamp))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car (list 'lamp)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'lamp)))
    (absent closure _.0))
  (((lambda (_.0 _.1) _.1) '_.2 '(I love lamp))
    (=/= ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  ((list 'I 'love ((lambda (_.0) _.0) 'lamp))
    (=/= ((_.0 closure))) (sym _.0))
  (((lambda () (list (car '(I . _.0)) 'love 'lamp)))
    (absent closure _.0))
  (((lambda (_.0) (list 'I 'love 'lamp)) '_.1)
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car ((lambda () '((I love lamp) . _.0))))
    (absent closure _.0))
  (cons 'I ((lambda () '(love lamp))))
  ((list (cdr '(_.0 . I)) 'love (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  (list (car (list 'I)) 'love 'lamp)
  (car (list '(I love lamp) #t))
  ((list 'I 'love ((lambda () (cdr '(_.0 . lamp)))))
    (absent closure _.0))
  ((if #f _.0 '(I love lamp)) (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (cdr '(_.2 . lamp)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons 'I (list 'love (car '(lamp . _.0))))
    (absent closure _.0))
  (((lambda () (list 'I 'love (car '(lamp . _.0)))))
    (absent closure _.0))
  (((lambda () ((lambda (_.0) '(I love lamp)) '_.1)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I 'love (if #t 'lamp _.0)) (absent closure _.0))
  (((lambda (_.0) (car '((I love lamp) . _.1))) '_.2)
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (cons ((lambda () 'I)) '(love lamp))
  ((cons 'I (list (car '(love . _.0)) 'lamp))
    (absent closure _.0))
  ((lambda () (car (list '(I love lamp)))))
  ((car (list '(I love lamp) '_.0 (list)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love ((lambda () 'lamp)))
    (absent closure _.0))
  (((lambda () (list 'I (car '(love . _.0)) 'lamp)))
    (absent closure _.0))
  ((car (list '(I love lamp) (list) '_.0))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list 'I 'love ((lambda () ((lambda () 'lamp)))))
  ((car (cdr '(_.0 (I love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda (_.0 _.1) _.0) '(I love lamp) '_.2)
    (=/= ((_.0 closure)) ((_.1 _.0))) (absent closure _.1)
    (absent closure _.2) (sym _.0))
  ((cons 'I (cdr '(_.0 love lamp))) (absent closure _.0))
  ((list ((lambda () 'I)) 'love (car '(lamp . _.0)))
    (absent closure _.0))
  (car (cons '(I love lamp) (list)))
  (((lambda (_.0) (cons 'I '(love lamp))) '_.1)
    (=/= ((_.0 cons)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (car '(love . _.0)) ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (list 'I 'love (car (list 'lamp (list))))
  ((cdr (car '((_.0 I love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love)) ((lambda () 'lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love (if '#t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) ((lambda () 'love)) 'lamp)
    (absent closure _.0))
  ((list ((lambda () 'I)) (car '(love . _.0)) 'lamp)
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (list 'I (car (list 'love)) 'lamp)
  ((list 'I (car '(love . _.0)) (if '#t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((cdr (cons '_.0 '(I love lamp))) (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car (list 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) '(I love lamp)) #t) (=/= ((_.0 quote)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda () (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love)) 'lamp)
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (car '((lamp . _.0) . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () 'love)) (car '(lamp . _.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (if '#f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) (car (list 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) 'lamp) (list)))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (car '(lamp . _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) (list 'I 'love _.0)) 'lamp)
    (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
    (sym _.0))
  ((cons (car '(I . _.0)) (car '((love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) (if '#f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (car '(lamp . _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) 'love (car (list 'lamp)))
    (absent closure _.0))
  ((list 'I 'love (car (cons 'lamp '_.0)))
    (absent closure _.0))
  (list 'I 'love ((lambda () (car (list 'lamp)))))
  ((cons (cdr '(_.0 . I)) (list 'love 'lamp))
    (absent closure _.0))
  ((cons (car '(I . _.0)) (cons 'love '(lamp)))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (car (list 'lamp)))
    (absent closure _.0))
  (car (cons '(I love lamp) #t))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) ((lambda () '(I love lamp)))) '_.1)
    (=/= ((_.0 lambda)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((cons 'I (list 'love (cdr '(_.0 . lamp))))
    (absent closure _.0))
  (((lambda () ((lambda (_.0) _.0) '(I love lamp))))
    (=/= ((_.0 closure))) (sym _.0))
  (((lambda () (list 'I 'love (cdr '(_.0 . lamp)))))
    (absent closure _.0))
  (car ((lambda () (list '(I love lamp)))))
  ((list (car '(I . _.0)) 'love ((lambda (_.1) _.1) 'lamp))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  (((lambda (_.0) (list _.0 'love 'lamp)) 'I)
    (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
    (sym _.0))
  ((list 'I (car '(love . _.0)) ((lambda (_.1) _.1) 'lamp))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  (((lambda (_.0) (list 'I _.0 'lamp)) 'love)
    (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote)))
    (sym _.0))
  ((list 'I 'love ((lambda (_.0) (car '(lamp . _.1))) '_.2))
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cdr ((lambda () '(_.0 I love lamp))))
    (absent closure _.0))
  ((list ((lambda () 'I)) 'love (cdr '(_.0 . lamp)))
    (absent closure _.0))
  (((lambda (_.0) (list 'I 'love 'lamp)) (list))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0))
  (((lambda () (list (cdr '(_.0 . I)) 'love 'lamp)))
    (absent closure _.0))
  ((list 'I 'love (car (list (car '(lamp . _.0)))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 #t)) (absent closure _.0))
  ((list 'I 'love (car ((lambda () '(lamp . _.0)))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((cons (car '(I . _.0)) ((lambda () '(love lamp))))
    (absent closure _.0))
  (((lambda () (cons (car '(I . _.0)) '(love lamp))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda () (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () 'love)) (cdr '(_.0 . lamp)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (cdr '(_.2 . lamp)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list 'I 'love (car (list 'lamp #t)))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (cdr '(_.2 . lamp)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (if #f _.0 'lamp)) (absent closure _.0))
  (car (list '(I love lamp) #f))
  (car (cons '(I love lamp) #f))
  (((lambda (_.0) (cdr '(_.1 I love lamp))) '_.2)
    (=/= ((_.0 cdr)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car ((lambda (_.0) '((I love lamp) . _.1)) '_.2))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons 'I ((lambda (_.0) '(love lamp)) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love lamp) #t '_.0)) (absent closure _.0))
  ((cdr (list '_.0 'I 'love 'lamp)) (absent closure _.0))
  (cons 'I (list 'love ((lambda () 'lamp))))
  (car (list (list 'I 'love 'lamp)))
  ((lambda () (list 'I 'love ((lambda () 'lamp)))))
  (((lambda (_.0) ((lambda () _.0))) '(I love lamp))
    (=/= ((_.0 closure)) ((_.0 lambda))) (sym _.0))
  ((cons (car '(I . _.0)) (list 'love (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((car (car (list '((I love lamp) . _.0))))
    (absent closure _.0))
  (cons 'I (car (list '(love lamp))))
  ((lambda () (cons 'I (list 'love 'lamp))))
  ((list (car '(I . _.0)) 'love (if #t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (car _.0)) '((I love lamp) . _.1))
    (=/= ((_.0 car)) ((_.0 closure))) (absent closure _.1)
    (sym _.0))
  (((lambda () (if '#t '(I love lamp) _.0)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (if #t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  (cons 'I (cons 'love (list 'lamp)))
  (((lambda (_.0) (car '((I love lamp) . _.1))) (list))
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (car (list '(I love lamp) (list) (list)))
  (list ((lambda () 'I)) 'love ((lambda () 'lamp)))
  ((list 'I 'love ((lambda (_.0 _.1) 'lamp) '_.2 '_.3))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((car (list '(I love lamp) '_.0 '_.1 (list)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (car (list '(I love lamp) '_.0))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 (list) '_.1))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (cons 'I _.0)) '(love lamp))
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0))
  (((lambda ()
      (list (car '(I . _.0)) 'love (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (cons (car (list 'I)) '(love lamp))
  ((car (list '(I love lamp) (list) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((cdr (cdr '(_.0 _.1 I love lamp))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  (((lambda () (if '#f _.0 '(I love lamp))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (cons '(I love lamp) (list '_.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0))
  ((cons (car '(I . _.0)) (list (car '(love . _.1)) 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car (list 'I)) 'love (car '(lamp . _.0)))
    (absent closure _.0))
  ((car (list (list 'I 'love 'lamp) '_.0))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0))
  ((list 'I 'love ((lambda () ((lambda (_.0) 'lamp) '_.1))))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I 'love (car (list 'lamp '_.0 (list))))
    (absent closure _.0))
  ((car (cons '(I love lamp) (lambda _.0 _.1)))
    (absent closure _.0) (absent closure _.1))
  ((lambda () ((lambda () (list 'I 'love 'lamp)))))
  ((list 'I 'love (car (list (car '(lamp . _.0)) '_.1)))
    (absent closure _.0) (absent closure _.1))
  (list 'I ((lambda () 'love)) ((lambda () 'lamp)))
  ((list 'I (cdr '(_.0 . love)) ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda (_.2) 'lamp) '_.3))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list 'I 'love (car (list 'lamp (list) '_.0)))
    (absent closure _.0))
  (((lambda (_.0) (cons 'I '(love lamp))) (list))
    (=/= ((_.0 cons)) ((_.0 quote))) (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda () 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love (car (list 'lamp (list))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda () 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) (cdr '(_.1 love lamp)))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (list (cdr '(_.0 . love)) 'lamp))
    (absent closure _.0))
  ((list 'I 'love (car (cdr '(_.0 lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) (car (list 'lamp (list))))
    (absent closure _.0))
  (((lambda () (list 'I (cdr '(_.0 . love)) 'lamp)))
    (absent closure _.0))
  (((lambda ()
      (list (car '(I . _.0)) (car '(love . _.1)) 'lamp)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love (car (cons 'lamp (list))))
  ((list (cdr '(_.0 . I)) 'love (if '#t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love (car (list 'lamp '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) ((lambda () 'love)) 'lamp)
    (absent closure _.0))
  ((cons 'I (list (car '(love . _.0)) (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  (((lambda () ((lambda (_.0) '(I love lamp)) (list))))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list (car (list 'I)) (car '(love . _.0)) 'lamp)
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'lamp '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda () (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list 'I (car '(love . _.0)) (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda () (if '#t 'lamp _.0))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car (list 'love)) 'lamp)
    (absent closure _.0))
  ((list 'I 'love (cdr (car '((_.0 . lamp) . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love)) (if '#t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (if '#t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love
     ((lambda () ((lambda () (car '(lamp . _.0)))))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love (car (list 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) (cdr '(_.0 . love)) 'lamp)
    (absent closure _.0))
  (cons 'I (list 'love (car (list 'lamp))))
  (((lambda (_.0) (cons _.0 '(love lamp))) 'I)
    (=/= ((_.0 closure)) ((_.0 cons)) ((_.0 quote)))
    (sym _.0))
  ((list 'I (cdr '(_.0 . love))
     ((lambda () (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () (car '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (cons 'I ((lambda () (list 'love 'lamp))))
  ((lambda () (list 'I 'love (car (list 'lamp)))))
  ((list 'I 'love ((lambda () (car (list 'lamp '_.0)))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     (car (car '((lamp . _.1) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) 'love (if '#f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) (cdr '(_.1 . lamp))) '_.2))
    (=/= ((_.0 cdr)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) ((lambda () 'love))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (car (car '((lamp . _.1) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) (car '(love . _.0))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love)) (car (list 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love ((lambda () (if '#f _.0 'lamp))))
    (absent closure _.0))
  ((list 'I (car (list 'love)) (car '(lamp . _.0)))
    (absent closure _.0))
  (((lambda () ((lambda () (car '((I love lamp) . _.0))))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) 'lamp) (list)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love))
     (car '(lamp . _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list (car '((I love lamp) . _.0))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (if '#f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (if '#f _.2 'lamp))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) 'lamp) (list)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car ((lambda () (list '(I love lamp) '_.0))))
    (absent closure _.0))
  (list ((lambda () 'I)) 'love (car (list 'lamp)))
  ((list 'I 'love (cdr (cons '_.0 'lamp)))
    (absent closure _.0))
  ((cons (cdr '(_.0 . I)) (car '((love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) (car _.0)) '(lamp . _.1)))
    (=/= ((_.0 car)) ((_.0 closure))) (absent closure _.1)
    (sym _.0))
  ((list (car '(I . _.0)) 'love (car (cons 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  (cons ((lambda () 'I)) (list 'love 'lamp))
  (car (list (list 'I 'love 'lamp) (list)))
  (cdr (cons (list) '(I love lamp)))
  ((list 'I (car '(love . _.0)) (car (cons 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () (car (list 'lamp)))))
    (absent closure _.0))
  ((lambda () ((lambda () (cons 'I '(love lamp))))))
  (((lambda (_.0 _.1) '(I love lamp)) '_.2 (list))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (list (list 'I 'love 'lamp) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () (car (list 'lamp)))))
    (absent closure _.0))
  (list 'I ((lambda () 'love)) (car (list 'lamp)))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (car (list 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((cons (cdr '(_.0 . I)) (cons 'love '(lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (car (list 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda (_.0) 'I) '_.1) 'love 'lamp)
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car ((lambda (_.0) _.0) '((I love lamp) . _.1)))
    (=/= ((_.0 closure))) (absent closure _.1) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) '(I love lamp)) '_.2)) '_.3)
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((cons 'I ((lambda (_.0) _.0) '(love lamp)))
    (=/= ((_.0 closure))) (sym _.0))
  (((lambda (_.0) (list 'I 'love (car '(lamp . _.1)))) '_.2)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) ((lambda () '(I love lamp)))) (list))
    (=/= ((_.0 lambda)) ((_.0 quote))) (absent closure _.0))
  (list 'I 'love (car (cons 'lamp #t)))
  ((list 'I 'love ((lambda (_.0 _.1) _.1) '_.2 'lamp))
    (=/= ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  (((lambda (_.0) (car (list '(I love lamp)))) '_.1)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((cons (car '(I . _.0)) (list 'love (cdr '(_.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love ((lambda (_.1) _.1) 'lamp))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  ((car (list (car '((I love lamp) . _.0)) '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda () ((lambda (_.0) _.0) 'lamp))))
    (=/= ((_.0 closure))) (sym _.0))
  ((list 'I (cdr '(_.0 . love)) ((lambda (_.1) _.1) 'lamp))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda (_.2) _.2) 'lamp))
    (=/= ((_.2 closure))) (absent closure _.0)
    (absent closure _.1) (sym _.2))
  ((car (list '(I love lamp) (list '_.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (car '(lamp . _.2))) '_.3))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  (((lambda ()
      (list (car '(I . _.0)) 'love (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) (car '(lamp . _.2))) '_.3))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  (list 'I 'love (car ((lambda () (list 'lamp)))))
  ((lambda () (list ((lambda () 'I)) 'love 'lamp)))
  ((list (car (list 'I)) 'love (cdr '(_.0 . lamp)))
    (absent closure _.0))
  ((list 'I 'love (if '#t (car '(lamp . _.0)) _.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#f _.0 (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  (car (list (cons 'I '(love lamp))))
  ((list 'I 'love (car (list (car '(lamp . _.0)) (list))))
    (absent closure _.0))
  (car (list (list 'I 'love 'lamp) #t))
  ((list (car '(I . _.0)) 'love
     (car (list (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda (_.0) (car '(lamp . _.1))) (list)))
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (car (list '(I love lamp) (list) #t))
  ((list 'I 'love (car (list (car '(lamp . _.0)) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (cdr ((lambda () '(_.0 . lamp)))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 '_.1 #t))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (car (list (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (list (car '(love . _.0)) (cdr '(_.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) ((lambda () 'lamp))) '_.1))
    (=/= ((_.0 lambda)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((cons 'I (cons (car '(love . _.0)) '(lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     (car ((lambda () '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda () (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((lambda () ((lambda () ((lambda () '(I love lamp)))))))
  (((lambda ()
      (list 'I (car '(love . _.0)) (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (car ((lambda () '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda () ((lambda () (cdr '(_.0 . lamp)))))))
    (absent closure _.0))
  ((cons (cdr '(_.0 . I)) ((lambda () '(love lamp))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     ((lambda () (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () (cdr '(_.2 . lamp)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) ((lambda () 'love))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) (car '(love . _.0))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car (list 'love)) (cdr '(_.0 . lamp)))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp '_.0 #t)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love))
     (cdr '(_.2 . lamp)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda () (if #t '(I love lamp) _.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car (list 'lamp #t)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'lamp #t)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (if #f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if #t (car '(lamp . _.0)) _.1))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 #f)) (absent closure _.0))
  ((list 'I 'love ((lambda (_.0) (car (list 'lamp))) '_.1))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) (if #f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((car (list (list 'I 'love 'lamp) '_.0 (list)))
    (absent closure _.0))
  ((list 'I 'love ((lambda (_.0 _.1) _.0) 'lamp '_.2))
    (=/= ((_.0 closure)) ((_.1 _.0))) (absent closure _.1)
    (absent closure _.2) (sym _.0))
  ((cdr ((lambda (_.0) '(_.1 I love lamp)) '_.2))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (list (list 'I 'love 'lamp) (list) '_.0))
    (absent closure _.0))
  (((lambda (_.0) (cdr '(_.1 I love lamp))) (list))
    (=/= ((_.0 cdr)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love lamp))) '_.2)
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 closure)))
    (absent closure _.0) (absent closure _.2) (sym _.1))
  ((car (list (list 'I 'love 'lamp) '_.0 '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((if '#t (list 'I 'love 'lamp) _.0) (absent closure _.0))
  ((car (list '(I love lamp) '_.0 #t '_.1))
    (absent closure _.0) (absent closure _.1))
  (cdr (list (list) 'I 'love 'lamp))
  ((if '#f _.0 (list 'I 'love 'lamp)) (absent closure _.0))
  ((list 'I 'love (car (list (cdr '(_.0 . lamp)))))
    (absent closure _.0))
  ((car (list '(I love lamp) (lambda _.0 _.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (cdr _.0)) '(_.1 I love lamp))
    (=/= ((_.0 cdr)) ((_.0 closure))) (absent closure _.1)
    (sym _.0))
  ((cons (car '(I . _.0)) ((lambda (_.1) '(love lamp)) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car ((lambda (_.0) (list '(I love lamp))) '_.1))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (((lambda () ((lambda (_.0 _.1) '(I love lamp)) '_.2 '_.3)))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  (((lambda (_.0 _.1) '(I love lamp)) (list) '_.2)
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (car (list '(I love lamp) #t (list)))
  (list 'I 'love (car (list 'lamp #f)))
  ((cons (car '(I . _.0)) (list 'love ((lambda () 'lamp))))
    (absent closure _.0))
  (list 'I 'love (car (cons 'lamp #f)))
  ((cdr (car (list '(_.0 I love lamp))))
    (absent closure _.0))
  ((car (if '#t '((I love lamp) . _.0) _.1))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (if '#t '(love lamp) _.0)) (absent closure _.0))
  ((car (list '(I love lamp) #f '_.0)) (absent closure _.0))
  (((lambda (_.0 _.1) (list 'I 'love 'lamp)) '_.2 '_.3)
    (=/= ((_.0 list)) ((_.0 quote)) ((_.1 list))
      ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((cons (cdr '(_.0 . I)) (list 'love (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car ((lambda (_.0) '(lamp . _.1)) '_.2)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (cdr '(_.0 . I)) 'love (if #t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((if #t (list 'I 'love 'lamp) _.0) (absent closure _.0))
  (((lambda () (cons (cdr '(_.0 . I)) '(love lamp))))
    (absent closure _.0))
  ((car (list '(I love lamp) #t '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp #t '_.0)))
    (absent closure _.0))
  ((list 'I 'love ((lambda () (if #t 'lamp _.0))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (if #t 'lamp _.1))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (if #t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list (car '((I love lamp) . _.0)) (list)))
    (absent closure _.0))
  (((lambda ()
      (list (car '(I . _.0)) 'love ((lambda () 'lamp)))))
    (absent closure _.0))
  ((cons (car '(I . _.0)) (car (list '(love lamp))))
    (absent closure _.0))
  ((lambda () (car (list '(I love lamp) (list)))))
  ((car (list '(I love lamp) '_.0 (list) (list)))
    (absent closure _.0))
  ((car (car (list '((I love lamp) . _.0) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (car (list '(love lamp) '_.0)))
    (absent closure _.0))
  ((car (list '(I love lamp) (list) '_.0 (list)))
    (absent closure _.0))
  ((cons 'I (list 'love ((lambda (_.0) 'lamp) '_.1)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 (list)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list (car (list 'I)) 'love ((lambda () 'lamp)))
  ((car (list (car '((I love lamp) . _.0)) '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda () (list 'I 'love ((lambda (_.0) 'lamp) '_.1))))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (car (cons '(I love lamp) (list (list))))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1 _.2) 'lamp) '_.3 '_.4))
    (=/= ((_.1 quote)) ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  (((lambda (_.0) (list (car '(I . _.1)) 'love 'lamp)) '_.2)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) (list) (list) '_.0))
    (absent closure _.0))
  ((cons (car '(I . _.0)) (cons 'love (list 'lamp)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1 _.2) 'lamp) '_.3 '_.4))
    (=/= ((_.1 quote)) ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  ((car (list '(I love lamp) '_.0 '_.1 (list) '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (if '#f _.0 '((I love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (if '#f _.0 '(love lamp))) (absent closure _.0))
  ((list (if '#t 'I _.0) 'love 'lamp) (absent closure _.0))
  (((lambda () (car (list '(I love lamp) '_.0 '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 (list) '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (car (list '(lamp . _.0)))))
    (absent closure _.0))
  ((car (list '(I love lamp) (list) '_.0 '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 '_.3 '_.4))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  ((car (cons '(I love lamp) (list '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) 'love ((lambda (_.0) 'lamp) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) ((lambda () _.0))) 'lamp))
    (=/= ((_.0 closure)) ((_.0 lambda))) (sym _.0))
  (((lambda ()
      (list (cdr '(_.0 . I)) 'love (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0))
  ((cons 'I (list (car '(love . _.0)) ((lambda () 'lamp))))
    (absent closure _.0))
  (((lambda ()
      (list 'I (car '(love . _.0)) ((lambda () 'lamp)))))
    (absent closure _.0))
  ((car (list (cons 'I '(love lamp)) '_.0))
    (absent closure _.0))
  (list 'I 'love (car (list 'lamp (list) (list))))
  ((cons (cdr '(_.0 . I)) (list (car '(love . _.1)) 'lamp))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love
    ((lambda () ((lambda () ((lambda () 'lamp)))))))
  ((list 'I (cdr '(_.0 . love))
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((if '#t (car '((I love lamp) . _.0)) _.1)
    (absent closure _.0) (absent closure _.1))
  ((if '#f _.0 (car '((I love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () 'love)) ((lambda (_.0) 'lamp) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (car (list (car '(lamp . _.1)) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda (_.2) 'lamp) '_.3))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((cons 'I (list 'love (if '#t 'lamp _.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) ((lambda () 'love))
     ((lambda () 'lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda (_.2) 'lamp) '_.3))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list 'I 'love (car (list 'lamp '_.0 (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) (car '(love . _.0))
     ((lambda () 'lamp)))
    (absent closure _.0))
  (((lambda () (car (car '(((I love lamp) . _.0) . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (cons 'I (list ((lambda () 'love)) 'lamp))
  ((list 'I (car '(love . _.0))
     (car (list (car '(lamp . _.1)) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda () (list 'I 'love (if '#t 'lamp _.0))))
    (absent closure _.0))
  (list 'I (car (list 'love)) ((lambda () 'lamp)))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (cons 'I (car '((love lamp) . _.0)))))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp (list) '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((lambda () (list 'I ((lambda () 'love)) 'lamp)))
  ((list (cdr '(_.0 . I)) 'love (car (list 'lamp (list))))
    (absent closure _.0))
  (((lambda () ((lambda () (cdr '(_.0 I love lamp))))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love))
     ((lambda () 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (cdr (cdr '(_.0 _.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0 _.1) _.0) '(I love lamp) (list))
    (=/= ((_.0 closure)) ((_.1 _.0))) (absent closure _.1)
    (sym _.0))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((cons 'I (list 'love ((lambda () (car '(lamp . _.0))))))
    (absent closure _.0))
  (car ((lambda () (list '(I love lamp) (list)))))
  ((list (car '(I . _.0)) 'love
     (car (cdr '(_.1 lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (cons 'lamp (list '_.0))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  (((lambda ()
      (list 'I 'love ((lambda () (car '(lamp . _.0)))))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (car (list 'lamp (list))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp (list))))
    (absent closure _.0) (absent closure _.1))
  ((cons (cdr '(_.0 . I)) (cdr '(_.1 love lamp)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love ((lambda () (car (list 'lamp (list))))))
  ((list 'I (car '(love . _.0))
     (car (cdr '(_.1 lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) 'love (if '#t 'lamp _.0))
    (absent closure _.0))
  ((car ((lambda (_.0) '((I love lamp) . _.1)) (list)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((if #t (car '((I love lamp) . _.0)) _.1)
    (absent closure _.0) (absent closure _.1))
  ((cons 'I ((lambda (_.0) '(love lamp)) (list)))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list 'I 'love ((lambda (_.0) (cdr _.0)) '(_.1 . lamp)))
    (=/= ((_.0 cdr)) ((_.0 closure))) (absent closure _.1)
    (sym _.0))
  (list ((lambda () 'I)) ((lambda () 'love)) 'lamp)
  ((list (car '(I . _.0)) 'love (car (cons 'lamp (list))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love (car (list 'lamp '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) (list 'I 'love (cdr '(_.1 . lamp)))) '_.2)
    (=/= ((_.0 cdr)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) (list (cdr '(_.1 . love)) 'lamp))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (list (car '(I . _.1)) 'love 'lamp))
     (list))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (list 'love (car (list 'lamp '_.0))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (cons 'lamp (list))))
    (absent closure _.0))
  (((lambda ()
      (list (cdr '(_.0 . I)) (car '(love . _.1)) 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((car ((lambda () (list '(I love lamp) '_.0 '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list (car '(lamp . _.0)) #t)))
    (absent closure _.0))
  (((lambda () (list 'I 'love (car (list 'lamp '_.0)))))
    (absent closure _.0))
  ((list 'I 'love (car (cons 'lamp (lambda _.0 _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) 'love
     ((lambda () (car '(lamp . _.0)))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (car (list 'lamp '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I 'love ((lambda () (car (list 'lamp '_.0 '_.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () (if '#t 'lamp _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda (_.0) 'love) '_.1) 'lamp)
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((if '#t (cons 'I '(love lamp)) _.0) (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car (list 'love)) 'lamp)
    (absent closure _.0))
  ((list 'I ((lambda () 'love)) (if '#t 'lamp _.0))
    (absent closure _.0))
  ((cons 'I (list 'love (if '#f _.0 'lamp)))
    (absent closure _.0))
  ((if '#f _.0 (cons 'I '(love lamp))) (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (if '#t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     ((lambda () (if '#t 'lamp _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (cdr (car '((_.1 . lamp) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda ()
      (list (car '(I . _.0)) (cdr '(_.1 . love)) 'lamp)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (list 'I 'love (if '#f _.0 'lamp))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (if '#t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0))
     (list (car '(love . _.1)) (car '(lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) 'love (car (list 'lamp '_.0)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     (cdr (car '((_.1 . lamp) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda () (car (cons '(I love lamp) '_.0))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda () (car '(lamp . _.1)))))))
    (absent closure _.0) (absent closure _.1))
  ((lambda () (cons 'I (cons 'love '(lamp)))))
  ((list (car (list 'I)) (cdr '(_.0 . love)) 'lamp)
    (absent closure _.0))
  ((list 'I ((lambda () 'love))
     ((lambda () (car '(lamp . _.0)))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda () (car '(lamp . _.1)))))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda () (car '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda () (car '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (cdr (cons #t '(I love lamp)))
  ((cons 'I (list (cdr '(_.0 . love)) (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     (car (car '((lamp . _.1) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     ((lambda () (car (list 'lamp '_.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) 'love (if '#f _.0 'lamp))
    (absent closure _.0))
  (((lambda ()
      (list 'I (cdr '(_.0 . love)) (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (car '(I . _.0)) (car '(love . _.1))
        (car '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car ((lambda () (car '(((I love lamp) . _.0) . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I ((lambda () (car '((love lamp) . _.0)))))
    (absent closure _.0))
  ((list 'I 'love (car (list (cdr '(_.0 . lamp)) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () (car (list 'lamp '_.1)))))
    (absent closure _.0) (absent closure _.1))
  ((if #t (cons 'I '(love lamp)) _.0) (absent closure _.0))
  ((cons (car '(I . _.0)) (list 'love (car (list 'lamp))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) ((lambda () 'love))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () 'love)) (car (list 'lamp '_.0)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (cdr '(_.2 . lamp))) '_.3))
    (=/= ((_.1 cdr)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (car (list 'lamp '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) (list 'I 'love (car _.0))) '(lamp . _.1))
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  ((list 'I 'love
     ((lambda () (car (car '((lamp . _.0) . _.1))))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love))
     (car (car '((lamp . _.1) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (car '((lamp . _.2) . _.3))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car (list 'I)) (car '(love . _.0))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((car (list (list 'I 'love 'lamp) '_.0 #t))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (car (list 'lamp '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) ((lambda () (list 'love 'lamp))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) (cdr '(_.2 . lamp))) '_.3))
    (=/= ((_.1 cdr)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list (car '(I . _.0)) 'love
     ((lambda () (if '#f _.1 'lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car (list 'love))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (cons (car '(I . _.0)) (list 'love 'lamp))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda (_.1) 'lamp) (list)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () (if '#f _.1 'lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) (cdr '(_.0 . love))
     (car '(lamp . _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () 'love)) (if '#f _.0 'lamp))
    (absent closure _.0))
  (((lambda ()
      (list (car '(I . _.0)) 'love (car (list 'lamp)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (if '#f _.2 'lamp))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love ((lambda (_.0) 'lamp) #t))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (if '#f _.2 'lamp))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love
     ((lambda () ((lambda (_.0) 'lamp) (list)))))
    (=/= ((_.0 quote))) (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     ((lambda (_.1) 'lamp) (list)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda (_.2) 'lamp) (list)))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons ((lambda () 'I)) (car '((love lamp) . _.0)))
    (absent closure _.0))
  (list (car (list 'I)) 'love (car (list 'lamp)))
  (((lambda (_.0) ((lambda (_.1) _.0) '_.2)) '(I love lamp))
    (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 quote))
      ((_.1 _.0)))
    (absent closure _.1) (absent closure _.2) (sym _.0))
  ((list 'I 'love
     ((lambda (_.0) (cdr '(_.1 . lamp))) (list)))
    (=/= ((_.0 cdr)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list (car '(I . _.0)) 'love (cdr (cons '_.1 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0)) (cdr (cons '_.1 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love (car (cons 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((car ((lambda () (cons '(I love lamp) '_.0))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (car _.1)) '(lamp . _.2)))
    (=/= ((_.1 car)) ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  (cons 'I ((lambda () (cons 'love '(lamp)))))
  (car (list (list 'I 'love 'lamp) #f))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) (car _.1)) '(lamp . _.2)))
    (=/= ((_.1 car)) ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  (((lambda (_.0 _.1) (car '((I love lamp) . _.2))) '_.3
     '_.4)
    (=/= ((_.0 car)) ((_.0 quote)) ((_.1 car)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  ((cons 'I (list (car '(love . _.0)) (car (list 'lamp))))
    (absent closure _.0))
  ((list 'I 'love ((lambda () (car (cons 'lamp '_.0)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda () (car (list 'lamp)))))
    (absent closure _.0))
  (((lambda ()
      (list 'I (car '(love . _.0)) (car (list 'lamp)))))
    (absent closure _.0))
  ((car (list (car '((I love lamp) . _.0)) #t))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (car (cons 'lamp '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (cons 'lamp '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (if '#t (cdr '(_.0 . lamp)) _.1))
    (absent closure _.0) (absent closure _.1))
  (cons (car (list 'I)) (list 'love 'lamp))
  (((lambda (_.0) (list 'I (car '(love . _.1)) 'lamp)) '_.2)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (if '#f _.0 (cdr '(_.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love
    ((lambda () ((lambda () (car (list 'lamp)))))))
  ((car (list (list 'I 'love 'lamp) #t '_.0))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     ((lambda () (car (list 'lamp)))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () (car (list 'lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car ((lambda () (list 'lamp '_.0)))))
    (absent closure _.0))
  ((list (car '(I . _.0)) ((lambda () 'love))
     (car (list 'lamp)))
    (absent closure _.0))
  ((list 'I 'love
     (car (list (car '(lamp . _.0)) '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) (car '(love . _.0))
     (car (list 'lamp)))
    (absent closure _.0))
  (cons ((lambda () 'I)) (cons 'love '(lamp)))
  ((list ((lambda (_.0) 'I) '_.1) 'love (car '(lamp . _.2)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (list 'I (car (list 'love)) (car (list 'lamp)))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love))
     (car (list 'lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     (car (list (car '(lamp . _.0)) (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (list _.0 'love (car '(lamp . _.1)))) 'I)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  ((list 'I 'love
     (car (list (car '(lamp . _.0)) '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  (((lambda (_.0) (list 'I _.0 (car '(lamp . _.1)))) 'love)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  (((lambda () ((lambda (_.0 _.1) _.1) '_.2 '(I love lamp))))
    (=/= ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1))
  (((lambda (_.0 _.1) _.1) (list) '(I love lamp))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  (((lambda (_.0) (list 'I 'love (car '(lamp . _.1))))
     (list))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love (cdr (cons (list) 'lamp)))
  ((cdr ((lambda (_.0) _.0) '(_.1 I love lamp)))
    (=/= ((_.0 closure))) (absent closure _.1) (sym _.0))
  (car (list (list 'I 'love 'lamp) (list) (list)))
  (((lambda (_.0) ((lambda (_.1) '(I love lamp)) '_.2))
     (list))
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list (list 'I 'love 'lamp) '_.0 '_.1 (list)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if #t (cdr '(_.0 . lamp)) _.1))
    (absent closure _.0) (absent closure _.1))
  ((car (list (list 'I 'love 'lamp) '_.0 (list) '_.1))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0 _.1) (list 'I 'love _.1)) '_.2 'lamp)
    (=/= ((_.0 list)) ((_.0 quote)) ((_.1 closure))
      ((_.1 list)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.2) (sym _.1))
  ((car (list (list 'I 'love 'lamp) (list) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((cons (car '(I . _.0)) ((lambda (_.1) _.1) '(love lamp)))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  ((cdr (list '_.0 (car '(I . _.1)) 'love 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love (car (cons 'lamp #t)))
    (absent closure _.0))
  ((car (list (list 'I 'love 'lamp) '_.0 '_.1 '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list ((lambda (_.0) 'I) '_.1) (car '(love . _.2)) 'lamp)
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons 'I (list 'love ((lambda (_.0) _.0) 'lamp)))
    (=/= ((_.0 closure))) (sym _.0))
  ((list 'I (car '(love . _.0)) (car (cons 'lamp #t)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1 _.2) _.2) '_.3 'lamp))
    (=/= ((_.2 closure))) (absent closure _.0)
    (absent closure _.1) (absent closure _.3) (sym _.2))
  (((lambda (_.0) (cons 'I (list 'love 'lamp))) '_.1)
    (=/= ((_.0 cons)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () (car '(I . _.0)))) 'love 'lamp)
    (absent closure _.0))
  (((lambda () (list 'I 'love ((lambda (_.0) _.0) 'lamp))))
    (=/= ((_.0 closure))) (sym _.0))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1 _.2) _.2) '_.3 'lamp))
    (=/= ((_.2 closure))) (absent closure _.0)
    (absent closure _.1) (absent closure _.3) (sym _.2))
  (((lambda (_.0 _.1) (cons 'I '(love lamp))) '_.2 '_.3)
    (=/= ((_.0 cons)) ((_.0 quote)) ((_.1 cons))
      ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  (((lambda (_.0) (car (list '(I love lamp)))) (list))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0))
  (((lambda (_.0) (list (car '(I . _.1)) 'love _.0)) 'lamp)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  (((lambda (_.0) (car (list '(I love lamp) '_.1))) '_.2)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) 'love ((lambda (_.0) _.0) 'lamp))
    (=/= ((_.0 closure))) (sym _.0))
  ((cons (cdr '(_.0 . I)) (list 'love (cdr '(_.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car ((lambda (_.0) _.0) '(lamp . _.1))))
    (=/= ((_.0 closure))) (absent closure _.1) (sym _.0))
  ((car (list (car '((I love lamp) . _.0)) '_.1 (list)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda (_.1) _.1) 'lamp))))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  (((lambda ()
      ((lambda () (list (car '(I . _.0)) 'love 'lamp)))))
    (absent closure _.0))
  ((car (list (car '((I love lamp) . _.0)) (list) '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda (_.1) _.1) 'lamp))))
    (=/= ((_.1 closure))) (absent closure _.0) (sym _.1))
  (((lambda (_.0) (list _.0 (car '(love . _.1)) 'lamp)) 'I)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  (((lambda () ((lambda (_.0) (list 'I 'love 'lamp)) '_.1)))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I ((lambda () 'love)) ((lambda (_.0) _.0) 'lamp))
    (=/= ((_.0 closure))) (sym _.0))
  ((if '#t ((lambda () '(I love lamp))) _.0)
    (absent closure _.0))
  ((cons 'I (cons (car '(love . _.0)) (list 'lamp)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda (_.2) _.2) 'lamp))
    (=/= ((_.2 closure))) (absent closure _.0)
    (absent closure _.1) (sym _.2))
  ((if '#f _.0 ((lambda () '(I love lamp))))
    (absent closure _.0))
  ((car (list (car '((I love lamp) . _.0)) '_.1 '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda (_.2) _.2) 'lamp))
    (=/= ((_.2 closure))) (absent closure _.0)
    (absent closure _.1) (sym _.2))
  ((car (list '(I love lamp) '_.0 (list '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (list 'I (car '(love . _.1)) 'lamp))
     (list))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (car ((lambda () '((I love lamp) . _.0))))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda (_.1) (car '(lamp . _.2))) '_.3))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  (((lambda (_.0) ((lambda (_.1) '(I love lamp)) (list)))
     '_.2)
    (=/= ((_.0 lambda)) ((_.0 list)) ((_.0 quote))
      ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((lambda () (cons 'I ((lambda () '(love lamp))))))
  (car (list (cons 'I '(love lamp)) (list)))
  ((list 'I 'love
     ((lambda () ((lambda (_.0) (car '(lamp . _.1))) '_.2))))
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I (cdr '(_.0 . love))
     ((lambda (_.1) (car '(lamp . _.2))) '_.3))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda (_.2) (car '(lamp . _.3))) '_.4))
    (=/= ((_.2 car)) ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  ((list (car '(I . _.0)) 'love
     (car ((lambda () (list 'lamp)))))
    (absent closure _.0))
  (((lambda ()
      (list (cdr '(_.0 . I)) 'love (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda (_.0) ((lambda (_.1) 'lamp) '_.2)) '_.3))
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I (car '(love . _.0))
     (car ((lambda () (list 'lamp)))))
    (absent closure _.0))
  ((if #t ((lambda () '(I love lamp))) _.0)
    (absent closure _.0))
  (((lambda (_.0) (list 'I 'love 'lamp)) #t)
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0))
  ((car (list (cons 'I '(love lamp)) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (if '#t 'love _.0) 'lamp) (absent closure _.0))
  (car (list '(I love lamp) #t #t))
  (((lambda (_.0) (list 'I 'love ((lambda () 'lamp)))) '_.1)
    (=/= ((_.0 lambda)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (if '#t (car '(lamp . _.1)) _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (if '#t (car '(lamp . _.1)) _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     (if '#f _.1 (car '(lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     (car (list (car '(lamp . _.1)) (list))))
    (absent closure _.0) (absent closure _.1))
  ((lambda () (list (car (list 'I)) 'love 'lamp)))
  ((list 'I (car '(love . _.0))
     (if '#f _.1 (car '(lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) (if '#t '(I love lamp) _.1)) '_.2)
    (=/= ((_.0 if)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list (car '(lamp . _.1)) (list))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp (list '_.0))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     (car (list (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (list 'love ((lambda () (cdr '(_.0 . lamp))))))
    (absent closure _.0))
  ((lambda () (car (list '(I love lamp) #t))))
  (((lambda (_.0) ((lambda () (list 'I 'love 'lamp)))) '_.1)
    (=/= ((_.0 lambda)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 (list) #t))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (car '(lamp . _.2))) (list)))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons 'I ((lambda (_.0) (list 'love 'lamp)) '_.1))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  (((lambda ()
      (list 'I 'love ((lambda () (cdr '(_.0 . lamp)))))))
    (absent closure _.0))
  ((car (list '(I love lamp) (list) '_.0 #t))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 #t))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     (car (list (car '(lamp . _.1)) '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) (car '(lamp . _.2))) (list)))
    (=/= ((_.1 car)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     (cdr ((lambda () '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  (car (cons '(I love lamp) (list #t)))
  ((list 'I 'love
     ((lambda () (car (list (car '(lamp . _.0)))))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     (car (list (car '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list (car '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list (car '(lamp . _.1)) '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I (car '(love . _.0))
     (cdr ((lambda () '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((car ((lambda () ((lambda () '((I love lamp) . _.0))))))
    (absent closure _.0))
  (cons 'I ((lambda () ((lambda () '(love lamp))))))
  (((lambda () (if #f _.0 '(I love lamp))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) ((lambda () 'lamp))) '_.2))
    (=/= ((_.1 lambda)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list ((lambda () 'I)) 'love
     ((lambda () (cdr '(_.0 . lamp)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     (car ((lambda () '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (if '#f _.1 '(I love lamp))) '_.2)
    (=/= ((_.0 if)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) ((lambda () 'lamp))) '_.2))
    (=/= ((_.1 lambda)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I 'love
     ((lambda () (car ((lambda () '(lamp . _.0)))))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     (car ((lambda () '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car ((lambda () '(lamp . _.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love
     ((lambda (_.0) ((lambda () 'lamp))) (list)))
    (=/= ((_.0 lambda)) ((_.0 quote))) (absent closure _.0))
  ((cons (car '(I . _.0))
     (list (car '(love . _.1)) (cdr '(_.2 . lamp))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love
     ((lambda (_.0) (car (list 'lamp '_.1))) '_.2))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car ((lambda (_.0) (list '(I love lamp) '_.1)) '_.2))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons (car '(I . _.0)) (cons (car '(love . _.1)) '(lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda () (cdr '(_.1 . lamp)))))))
    (absent closure _.0) (absent closure _.1))
  (cons ((lambda () 'I)) ((lambda () '(love lamp))))
  ((list 'I ((lambda () 'love))
     ((lambda () (cdr '(_.0 . lamp)))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda () (cdr '(_.1 . lamp)))))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda () (cdr '(_.2 . lamp)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda () (cdr '(_.2 . lamp)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons 'I (list (cdr '(_.0 . love)) (cdr '(_.1 . lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list (cdr '(_.0 . lamp)) (list))))
    (absent closure _.0))
  (((lambda ()
      (list 'I (cdr '(_.0 . love)) (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (car '(I . _.0)) (car '(love . _.1))
        (cdr '(_.2 . lamp)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) ((lambda () 'love))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  (list 'I 'love (car (list 'lamp (list) #t)))
  (((lambda (_.0) (list 'I 'love (car (list 'lamp)))) '_.1)
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (car (list _.0))) '(I love lamp))
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))) (sym _.0))
  ((list (car (list 'I)) (car '(love . _.0))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 #t)))
    (absent closure _.0) (absent closure _.1))
  ((car (if #t '((I love lamp) . _.0) _.1))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (if #t '(love lamp) _.0)) (absent closure _.0))
  ((list (car '(I . _.0)) (car (list 'love))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  (car ((lambda () (list '(I love lamp) #t))))
  ((list 'I 'love (if '#t ((lambda () 'lamp)) _.0))
    (absent closure _.0))
  ((list 'I 'love (car (list (cdr '(_.0 . lamp)) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) (cdr '(_.0 . love))
     (cdr '(_.1 . lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love (car (list 'lamp '_.1 #t)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if #f _.0 (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((cdr (list '_.0 'I 'love (car '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (if '#f _.0 ((lambda () 'lamp))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'lamp '_.1 #t)))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love (car (list 'lamp #t)))
    (absent closure _.0))
  ((list 'I 'love (car (cons (car '(lamp . _.0)) '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (list (car '(I . _.1)) _.0 'lamp)) 'love)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  (((lambda () (cons 'I (list 'love (car '(lamp . _.0))))))
    (absent closure _.0))
  (((lambda (_.0) (list 'I (car '(love . _.1)) _.0)) 'lamp)
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  ((list 'I (cdr '(_.0 . love)) (car (list 'lamp #t)))
    (absent closure _.0))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp #t)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love ((lambda (_.0) (car (list _.0))) 'lamp))
    (=/= ((_.0 car)) ((_.0 closure)) ((_.0 list))) (sym _.0))
  (list 'I 'love ((lambda () (car (list 'lamp #t)))))
  ((cons 'I (cons 'love (list (car '(lamp . _.0)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love (if #f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  (car (list '(I love lamp) (list) #f))
  ((car (list '(I love lamp) '_.0 '_.1 #f))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (if #t (car '(lamp . _.1)) _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) (list '_.0) '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (if #t (car '(lamp . _.1)) _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I ((lambda (_.0) 'love) '_.1) (car '(lamp . _.2)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (car (list 'lamp))) '_.2))
    (=/= ((_.1 car)) ((_.1 list)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (cdr (list #t 'I 'love 'lamp))
  ((list 'I 'love ((lambda () (if #f _.0 'lamp))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love)) (if #f _.1 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (if #f _.2 'lamp))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1 _.2) _.1) 'lamp '_.3))
    (=/= ((_.1 closure)) ((_.2 _.1))) (absent closure _.0)
    (absent closure _.2) (absent closure _.3) (sym _.1))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) (car (list 'lamp))) '_.2))
    (=/= ((_.1 car)) ((_.1 list)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1 _.2) _.1) 'lamp '_.3))
    (=/= ((_.1 closure)) ((_.2 _.1))) (absent closure _.0)
    (absent closure _.2) (absent closure _.3) (sym _.1))
  (list 'I 'love (car (list ((lambda () 'lamp)))))
  (((lambda ()
      ((lambda () (list 'I 'love (car '(lamp . _.0)))))))
    (absent closure _.0))
  (((lambda (_.0 _.1) (list 'I 'love _.0)) 'lamp '_.2)
    (=/= ((_.0 closure)) ((_.0 list)) ((_.0 quote))
      ((_.1 _.0)) ((_.1 list)) ((_.1 quote)))
    (absent closure _.1) (absent closure _.2) (sym _.0))
  (((lambda (_.0) ((lambda (_.1) _.1) '(I love lamp)))
     (list))
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 closure)))
    (absent closure _.0) (sym _.1))
  ((list 'I 'love ((lambda (_.0) (if '#t 'lamp _.1)) '_.2))
    (=/= ((_.0 if)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda (_.0 _.1) (list 'I _.1 'lamp)) '_.2 'love)
    (=/= ((_.0 list)) ((_.0 quote)) ((_.1 closure))
      ((_.1 list)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.2) (sym _.1))
  ((list 'I 'love
     ((lambda (_.0) ((lambda () (car '(lamp . _.1))))) '_.2))
    (=/= ((_.0 car)) ((_.0 lambda)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) (list) #t '_.0))
    (absent closure _.0))
  ((list 'I 'love ((lambda (_.0) (car (list 'lamp))) (list)))
    (=/= ((_.0 car)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 '_.1 #t '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (if #t ((lambda () 'lamp)) _.0))
    (absent closure _.0))
  ((list ((lambda (_.0) 'I) '_.1) 'love (cdr '(_.2 . lamp)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda (_.0 _.1) (list _.1 'love 'lamp)) '_.2 'I)
    (=/= ((_.0 list)) ((_.0 quote)) ((_.1 closure))
      ((_.1 list)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.2) (sym _.1))
  ((list (car '(I . _.0)) 'love
     (car (list (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((car (cdr (list '_.0 '(I love lamp))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 (lambda _.1 _.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list (cdr '(_.1 . lamp)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      ((lambda () ((lambda (_.0) '(I love lamp)) '_.1)))))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car
     ((lambda (_.0 _.1) '((I love lamp) . _.2)) '_.3 '_.4))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  (((lambda (_.0 _.1 _.2) '(I love lamp)) '_.3 '_.4 '_.5)
    (=/= ((_.0 quote)) ((_.1 quote)) ((_.2 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4) (absent closure _.5))
  ((cons 'I ((lambda (_.0 _.1) '(love lamp)) '_.2 '_.3))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((cons 'I ((lambda () (list 'love (car '(lamp . _.0))))))
    (absent closure _.0))
  (car (car (list (list '(I love lamp)))))
  ((list 'I 'love
     ((lambda (_.0 _.1) (car '(lamp . _.2))) '_.3 '_.4))
    (=/= ((_.0 car)) ((_.0 quote)) ((_.1 car)) ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  ((list 'I 'love ((lambda (_.0) (if '#f _.1 'lamp)) '_.2))
    (=/= ((_.0 if)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((cons (cdr '(_.0 . I)) ((lambda (_.1) '(love lamp)) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (list '(I love lamp) '_.0 #t (list)))
    (absent closure _.0))
  ((cons 'I (list 'love (if #t 'lamp _.0)))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp '_.0 #f)))
    (absent closure _.0))
  (((lambda () (list 'I 'love (if #t 'lamp _.0))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love (car (list 'lamp #f)))
    (absent closure _.0))
  ((cdr (if '#t '(_.0 I love lamp) _.1))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      ((lambda (_.0) (car '((I love lamp) . _.1))) '_.2)))
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) 'love (car (cons 'lamp #f)))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (list 'lamp #f)))
    (absent closure _.0))
  ((list 'I 'love (cdr ((lambda (_.0) '(_.1 . lamp)) '_.2)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (list (list 'I 'love 'lamp) (list '_.0)))
    (absent closure _.0))
  ((if #f _.0 (list 'I 'love 'lamp)) (absent closure _.0))
  ((car (list '(I love lamp) '_.0 #f '_.1))
    (absent closure _.0) (absent closure _.1))
  ((cons (cdr '(_.0 . I)) (list 'love ((lambda () 'lamp))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0)) (car (cons 'lamp #f)))
    (absent closure _.0))
  ((car (cons (list 'I 'love 'lamp) '_.0))
    (absent closure _.0))
  ((cons 'I (cons (cdr '(_.0 . love)) '(lamp)))
    (absent closure _.0))
  ((cons ((lambda () 'I)) (list 'love (car '(lamp . _.0))))
    (absent closure _.0))
  ((lambda () (cons ((lambda () 'I)) '(love lamp))))
  ((list ((lambda () 'I)) 'love (if #t 'lamp _.0))
    (absent closure _.0))
  (car (list '(I love lamp) #f (list)))
  ((cdr (list '_.0 'I (car '(love . _.1)) 'lamp))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (car ((lambda (_.1) '(lamp . _.2)) '_.3)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((car ((lambda (_.0) (list _.0)) '(I love lamp)))
    (=/= ((_.0 closure)) ((_.0 list))) (sym _.0))
  (((lambda (_.0 _.1) ((lambda () '(I love lamp)))) '_.2
     '_.3)
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 lambda))
      ((_.1 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I (car '(love . _.0))
     (car ((lambda (_.1) '(lamp . _.2)) '_.3)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((car (list '(I love lamp) #t '_.0 (list)))
    (absent closure _.0))
  ((cons (car '(I . _.0)) (if '#t '(love lamp) _.1))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 #t '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda () (cons 'I (list (car '(love . _.0)) 'lamp))))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp '_.0 #t '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I ((lambda () (car '(love . _.0)))) 'lamp)
    (absent closure _.0))
  ((car (car (list '((I love lamp) . _.0) (list))))
    (absent closure _.0))
  (cons 'I (car (list '(love lamp) (list))))
  ((list 'I ((lambda () 'love)) (if #t 'lamp _.0))
    (absent closure _.0))
  (((lambda (_.0) (car '((I love lamp) . _.1))) #t)
    (=/= ((_.0 car)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list (car '(I . _.0)) 'love (car (list 'lamp #t '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (if #t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) #t (list) '_.0))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () (if #t 'lamp _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (if #t 'lamp _.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((lambda () ((lambda () (car (list '(I love lamp)))))))
  ((list 'I (car '(love . _.0)) (car (list 'lamp #t '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp (lambda _.0 _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda (_.0) ((lambda (_.1) _.1) 'lamp)) '_.2))
    (=/= ((_.0 lambda)) ((_.0 quote)) ((_.1 closure)))
    (absent closure _.0) (absent closure _.2) (sym _.1))
  (car (list '(I love lamp) (list) (list) (list)))
  ((list 'I (car '(love . _.0))
     ((lambda () (if #t 'lamp _.1))))
    (absent closure _.0) (absent closure _.1))
  ((cdr (car (list '(_.0 I love lamp) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1 (list) (list)))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) #f '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (car (list '(I love lamp) '_.0 (list)))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 (list) '_.1 (list)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list (car '(lamp . _.0)) '_.1 #t)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car ((lambda (_.0) (list 'lamp)) '_.1)))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list '(I love lamp) (list) '_.0 '_.1 (list)))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (cdr '(_.0 . I)) 'love ((lambda () 'lamp)))))
    (absent closure _.0))
  ((cons (cdr '(_.0 . I)) (car (list '(love lamp))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 '_.3 (list)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((car (list '(I love lamp) #t '_.0 '_.1 '_.2))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda (_.0) (list 'I 'love ((lambda () _.0)))) 'lamp)
    (=/= ((_.0 closure)) ((_.0 lambda)) ((_.0 list))
      ((_.0 quote)))
    (sym _.0))
  ((car (cons '(I love lamp) (list '_.0 (list))))
    (absent closure _.0))
  (((lambda ()
      ((lambda () (list 'I (car '(love . _.0)) 'lamp)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda (_.1 _.2) 'lamp) '_.3 '_.4))
    (=/= ((_.1 quote)) ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  (list 'I 'love (car (list 'lamp #t (list))))
  (car (list (list 'I 'love 'lamp) (list) #t))
  ((cons (car '(I . _.0)) (car (list '(love lamp) '_.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda () (car (list '(I love lamp) (list) '_.0))))
    (absent closure _.0))
  ((car (list '(I love lamp) '_.0 (list) (list) '_.1))
    (absent closure _.0) (absent closure _.1))
  ((car (car (list '((I love lamp) . _.0) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons 'I (car (list '(love lamp) '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) (list) '_.0 (list) '_.1))
    (absent closure _.0) (absent closure _.1))
  ((cons (car '(I . _.0))
     (list 'love ((lambda (_.1) 'lamp) '_.2)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car (list (list 'I 'love 'lamp) '_.0 '_.1 #t))
    (absent closure _.0) (absent closure _.1))
  ((cdr (if '#f _.0 '(_.1 I love lamp)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) ((lambda () (car '((I love lamp) . _.1)))))
     '_.2)
    (=/= ((_.0 car)) ((_.0 lambda)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 (list) '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I (cdr '(_.0 . love))
     ((lambda (_.1 _.2) 'lamp) '_.3 '_.4))
    (=/= ((_.1 quote)) ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda (_.2 _.3) 'lamp) '_.4 '_.5))
    (=/= ((_.2 quote)) ((_.3 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3) (absent closure _.4)
    (absent closure _.5))
  ((list 'I 'love (cdr (car (list '(_.0 . lamp)))))
    (absent closure _.0))
  ((car (cons '(I love lamp) (list (list) '_.0)))
    (absent closure _.0))
  ((list 'I 'love (car (if '#t '(lamp . _.0) _.1)))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) (list) (list) '_.0 '_.1))
    (absent closure _.0) (absent closure _.1))
  ((cons (cdr '(_.0 . I)) (cons 'love (list 'lamp)))
    (absent closure _.0))
  ((if '#t (cdr '(_.0 I love lamp)) _.1)
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1 (list) '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list 'I 'love
     ((lambda () ((lambda (_.0 _.1) 'lamp) '_.2 '_.3))))
    (=/= ((_.0 quote)) ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((if '#f _.0 (cdr '(_.1 I love lamp)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list 'lamp #f '_.0)))
    (absent closure _.0))
  (cons 'I (list 'love ((lambda () ((lambda () 'lamp))))))
  (((lambda () (car (list '(I love lamp) '_.0 '_.1 '_.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car (list '(I love lamp) '_.0 (list) '_.1 '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car '(I . _.0)) 'love
     (car (car (list '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((lambda ()
     (list 'I 'love ((lambda () ((lambda () 'lamp)))))))
  ((car (list '(I love lamp) (list) '_.0 '_.1 '_.2 '_.3))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  (((lambda () (car (cdr '(_.0 (I love lamp) . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((car (list '(I love lamp) '_.0 '_.1 '_.2 '_.3 '_.4 '_.5))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4) (absent closure _.5))
  ((list 'I (car '(love . _.0))
     (car (car (list '(lamp . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (car '(I . _.0)) 'love
        ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda () ((lambda (_.0 _.1) _.0) '(I love lamp) '_.2)))
    (=/= ((_.0 closure)) ((_.1 _.0))) (absent closure _.1)
    (absent closure _.2) (sym _.0))
  (((lambda () (cons 'I (cdr '(_.0 love lamp)))))
    (absent closure _.0))
  ((car (cons '(I love lamp) (list '_.0 '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0)) (if '#f _.1 '(love lamp)))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I ((lambda () (list (car '(love . _.0)) 'lamp))))
    (absent closure _.0))
  (((lambda ()
      (list ((lambda () 'I)) 'love (car '(lamp . _.0)))))
    (absent closure _.0))
  ((list (car (list 'I)) 'love ((lambda (_.0) 'lamp) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I 'love (car (list 'lamp #t '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) ((lambda () _.1))) 'lamp))
    (=/= ((_.1 closure)) ((_.1 lambda)))
    (absent closure _.0) (sym _.1))
  (list ((lambda () 'I)) 'love
    ((lambda () ((lambda () 'lamp)))))
  ((lambda () (car (cons '(I love lamp) (list)))))
  ((list 'I (car '(love . _.0))
     ((lambda (_.1) ((lambda () _.1))) 'lamp))
    (=/= ((_.1 closure)) ((_.1 lambda)))
    (absent closure _.0) (sym _.1))
  ((car ((lambda (_.0) (list '(I love lamp))) (list)))
    (=/= ((_.0 list)) ((_.0 quote))) (absent closure _.0))
  ((if #t (cdr '(_.0 I love lamp)) _.1) (absent closure _.0)
    (absent closure _.1))
  ((car ((lambda () (list '(I love lamp) '_.0 (list)))))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp '_.0 (list) (list))))
    (absent closure _.0))
  ((list 'I 'love (car (car (list '(lamp . _.0) '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((cons ((lambda () 'I)) (list (car '(love . _.0)) 'lamp))
    (absent closure _.0))
  (((lambda () ((lambda (_.0) (cons 'I '(love lamp))) '_.1)))
    (=/= ((_.0 cons)) ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((car (list (car '((I love lamp) . _.0)) '_.1 #t))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I
     (list (car '(love . _.0)) ((lambda (_.1) 'lamp) '_.2)))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list 'I 'love (car (list 'lamp (list) '_.0 (list))))
    (absent closure _.0))
  ((cons (car '(I . _.0))
     (list (car '(love . _.1)) ((lambda () 'lamp))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp (list) (list))))
    (absent closure _.0))
  (((lambda ()
      (list 'I (car '(love . _.0))
        ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (list 'I ((lambda () 'love))
    ((lambda () ((lambda () 'lamp)))))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 '_.2 (list))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp (list) (list))))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     ((lambda () ((lambda () ((lambda () 'lamp)))))))
    (absent closure _.0))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     ((lambda () ((lambda () 'lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     ((lambda () ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((car ((lambda () (list '(I love lamp) (list) '_.0))))
    (absent closure _.0))
  (list 'I 'love (car (cons 'lamp (list (list)))))
  ((list 'I (car '(love . _.0))
     ((lambda () ((lambda () ((lambda () 'lamp)))))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     (car (list 'lamp '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp '_.1 '_.2 (list))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (cons 'I (list 'love (car (list 'lamp (list)))))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp '_.1 '_.2 (list))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons 'I (list (cdr '(_.0 . love)) ((lambda () 'lamp))))
    (absent closure _.0))
  ((lambda () (list 'I 'love (car (list 'lamp (list))))))
  ((car (car (car '((((I love lamp) . _.0) . _.1) . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (list 'lamp (list) (list) '_.0)))
    (absent closure _.0))
  (((lambda (_.0 _.1) (car _.1)) '_.2 '((I love lamp) . _.3))
    (=/= ((_.0 car)) ((_.1 car)) ((_.1 closure)))
    (absent closure _.0) (absent closure _.2)
    (absent closure _.3) (sym _.1))
  ((cons 'I (car (car '(((love lamp) . _.0) . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) ((lambda () 'love))
     ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (((lambda () (cdr (car '((_.0 I love lamp) . _.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love))
     ((lambda () ((lambda (_.1) 'lamp) '_.2))))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     ((lambda () ((lambda (_.2) 'lamp) '_.3))))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  ((list ((lambda () 'I)) (car '(love . _.0))
     ((lambda (_.1) 'lamp) '_.2))
    (=/= ((_.1 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2))
  (car (cons (list 'I 'love 'lamp) (list)))
  (((lambda ()
      (list 'I (cdr '(_.0 . love)) ((lambda () 'lamp)))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) 'love
     (car (list (car '(lamp . _.1)) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (((lambda ()
      (list (car '(I . _.0)) (car '(love . _.1))
        ((lambda () 'lamp)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car (list 'love)) ((lambda (_.0) 'lamp) '_.1))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (cdr '(_.0 . love))
     (car (list 'lamp '_.1 (list))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp '_.2 (list))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (list 'lamp '_.0 '_.1 (list) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (if '#f _.0 '(lamp . _.1))))
    (absent closure _.0) (absent closure _.1))
  ((cons 'I (cons 'love (car '((lamp) . _.0))))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) ((lambda () 'love))
     ((lambda () 'lamp)))
    (absent closure _.0))
  ((car ((lambda () (list '(I love lamp) '_.0 '_.1 '_.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love (car (list (car '(lamp . _.0)) #f)))
    (absent closure _.0))
  ((list (cdr '(_.0 . I)) (cdr '(_.1 . love))
     ((lambda (_.2) 'lamp) '_.3))
    (=/= ((_.2 quote))) (absent closure _.0)
    (absent closure _.1) (absent closure _.2)
    (absent closure _.3))
  (car (list (cons 'I '(love lamp)) #t))
  (((lambda (_.0) (list 'I 'love (cdr _.0))) '(_.1 . lamp))
    (=/= ((_.0 cdr)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  ((list (car (list 'I)) (car '(love . _.0))
     ((lambda () 'lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp '_.1 (list) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((car ((lambda () (cdr '(_.0 (I love lamp) . _.1)))))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (cons 'I '(love lamp))) #t)
    (=/= ((_.0 cons)) ((_.0 quote))) (absent closure _.0))
  ((cons 'I ((lambda () (cdr '(_.0 love lamp)))))
    (absent closure _.0))
  ((list 'I 'love
     ((lambda () ((lambda () ((lambda (_.0) 'lamp) '_.1))))))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     (car (list 'lamp (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda () (car (list 'lamp '_.0 (list))))))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     (car (list (car '(lamp . _.1)) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list (car '(lamp . _.2)) '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car '(I . _.0)) (car (list 'love))
     ((lambda () 'lamp)))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp '_.0 (list) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp '_.1 (list) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list ((lambda () 'I)) 'love (car (list 'lamp (list))))
  ((car (list (list 'I 'love 'lamp) '_.0 #f))
    (absent closure _.0))
  ((list 'I 'love (car (list 'lamp (list) '_.0 '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list ((lambda () 'I)) (cdr '(_.0 . love))
     ((lambda () 'lamp)))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp (list) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons ((lambda (_.0) 'I) '_.1) '(love lamp))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((cons (car '(I . _.0)) (list 'love (if '#t 'lamp _.1)))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda () (car (list (car '(lamp . _.0)) '_.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love))
     (car (list 'lamp (list) '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp (list) '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp (list) '_.1 '_.2)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list 'I 'love
     (car (list 'lamp '_.0 '_.1 '_.2 '_.3 '_.4)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  ((list (car '(I . _.0)) 'love
     (cdr (cdr '(_.1 _.2 . lamp))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (car ((lambda () (cons '(I love lamp) (list)))))
  ((cons (car '(I . _.0)) (list ((lambda () 'love)) 'lamp))
    (absent closure _.0))
  ((list (car '(I . _.0)) 'love
     (car (list 'lamp '_.1 '_.2 '_.3 '_.4)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  ((list 'I 'love (car (cons 'lamp (list '_.0 '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (cdr (cdr '(_.1 _.2 . lamp))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (cdr '(_.0 . I)) 'love
     (car (list 'lamp '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((cons 'I (list 'love (car (list 'lamp '_.0 '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love
     ((lambda () (car (list 'lamp (list) '_.0)))))
    (absent closure _.0))
  ((list 'I (car '(love . _.0))
     (car (list 'lamp '_.1 '_.2 '_.3 '_.4)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  (((lambda (_.0) (list _.0 'love (cdr '(_.1 . lamp)))) 'I)
    (=/= ((_.0 cdr)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  (((lambda () (list 'I 'love (car (list 'lamp '_.0 '_.1)))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) 'love
     (car (cdr '(_.1 lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  (list 'I ((lambda () 'love)) (car (list 'lamp (list))))
  ((cons ((lambda () 'I)) (cdr '(_.0 love lamp)))
    (absent closure _.0))
  ((if #f _.0 (car '((I love lamp) . _.1)))
    (absent closure _.0) (absent closure _.1))
  (((lambda (_.0) (list 'I _.0 (cdr '(_.1 . lamp)))) 'love)
    (=/= ((_.0 cdr)) ((_.0 closure)) ((_.0 list))
      ((_.0 quote)))
    (absent closure _.1) (sym _.0))
  ((list (car '(I . _.0)) 'love
     (car (cons 'lamp (list '_.1))))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (car '(I . _.0)) 'love (if '#t 'lamp _.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (cdr '(_.0 . I)) (car '(love . _.1))
     (car (list 'lamp (list))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (cdr '(_.0 . love))
     (car (list 'lamp '_.1 '_.2 '_.3)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (list 'lamp '_.2 '_.3 '_.4)))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3)
    (absent closure _.4))
  (((lambda (_.0) ((lambda () (cons 'I '(love lamp))))) '_.1)
    (=/= ((_.0 cons)) ((_.0 lambda)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) (cdr '(_.1 . love))
     (car (list 'lamp (list))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I 'love (car (list (car '(lamp . _.0)) #t '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((cdr ((lambda (_.0) '(_.1 I love lamp)) (list)))
    (=/= ((_.0 quote))) (absent closure _.0)
    (absent closure _.1))
  ((list 'I (car '(love . _.0))
     (car (cons 'lamp (list '_.1))))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda () (car (list 'lamp (list))))))
    (absent closure _.0))
  (((lambda (_.0) (list 'I 'love (cdr '(_.1 . lamp))))
     (list))
    (=/= ((_.0 cdr)) ((_.0 list)) ((_.0 quote)))
    (absent closure _.0) (absent closure _.1))
  (((lambda ()
      (list (car '(I . _.0)) ((lambda () 'love)) 'lamp)))
    (absent closure _.0))
  ((list 'I (cdr '(_.0 . love))
     (car (cdr '(_.1 lamp . _.2))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((list (car '(I . _.0)) (car '(love . _.1))
     (car (cdr '(_.2 lamp . _.3))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2) (absent closure _.3))
  ((list (car (list 'I)) 'love (if '#t 'lamp _.0))
    (absent closure _.0))
  (car (list ((lambda () '(I love lamp)))))
  ((list 'I 'love
     ((lambda () (car (list 'lamp '_.0 '_.1 '_.2)))))
    (absent closure _.0) (absent closure _.1)
    (absent closure _.2))
  ((cons (car '(I . _.0))
     (list 'love ((lambda () (car '(lamp . _.1))))))
    (absent closure _.0) (absent closure _.1))
  ((list 'I (car '(love . _.0))
     ((lambda () (car (list 'lamp (list))))))
    (absent closure _.0))
  ((car (list (list 'I 'love 'lamp) '_.0 #t '_.1))
    (absent closure _.0) (absent closure _.1))
  ((list ((lambda () 'I)) 'love (car (list 'lamp '_.0 '_.1)))
    (absent closure _.0) (absent closure _.1))
  ((list (car '(I . _.0)) 'love
     ((lambda (_.1) (cdr _.1)) '(_.2 . lamp)))
    (=/= ((_.1 cdr)) ((_.1 closure))) (absent closure _.0)
    (absent closure _.2) (sym _.1)))
> (list (car '(I . _.0)) 'love
        ((lambda (_.1) (cdr _.1)) '(_.2 . lamp)))
(I love lamp)
> 
